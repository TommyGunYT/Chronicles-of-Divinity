[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float2 TexCoords0 : TEXCOORD0;
	float3 WorldNormal : TEXCOORD1;
	float3 WorldBinormal : TEXCOORD2;
	float3 WorldTangent : TEXCOORD3;
};

@uniform row_major float4x4 WorldMatrix;
VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(WorldMatrix);

	VertexOutput Out;

	row_major float3x4 boneMatrix1 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).x);
	row_major float3x4 boneMatrix2 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).y);
	row_major float3x4 boneMatrix3 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).z);
	row_major float3x4 boneMatrix4 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).w);
	//World space position
	float4 worldPosition = float4(0.0f, 0.0f, 0.0f, 1.0f);
	float4 tempPosSkinned = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, tempPosSkinned)));
	worldPosition = mul(WorldMatrix, worldPosition);

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = SRT_VS_BUFFER_TEXCOORD0(id);
	//Normalize Local Normal
	float3 localNormalNormalized = normalize(SRT_VS_BUFFER_NORMAL(id));

	//World space Normal
	float3 worldNormal = float3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localNormalNormalized, 0.0f))));
	worldNormal = mul(WorldMatrix, float4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	Out.WorldNormal = worldNormalNormalized;

	//Normalize Local Binormal
	float3 localBinormalNormalized = normalize(SRT_VS_BUFFER_BINORMAL(id));

	//World space Binormal
	float3 worldBinormal = float3(0.0f, 0.0f, 0.0f);
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = mul(WorldMatrix, float4(worldBinormal, 0.0f)).xyz;

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(worldBinormal);

	Out.WorldBinormal = worldBinormalNormalized;

	//Normalize Local Tangent
	float3 localTangentNormalized = normalize(SRT_VS_BUFFER_TANGENT(id));

	//World space Tangent
	float3 worldTangent = float3(0.0f, 0.0f, 0.0f);
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localTangentNormalized, 0.0f))));
	worldTangent = mul(WorldMatrix, float4(worldTangent, 0.0f)).xyz;

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(worldTangent);

	Out.WorldTangent = worldTangentNormalized;


	return Out;
}


[Fragment shader]


#pragma PSSL_target_output_format(default FMT_FP16_ABGR)
#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"
#include "Shaders/PS4/PBR.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float2 TexCoords0 : TEXCOORD0;
	float3 WorldNormal : TEXCOORD1;
	float3 WorldBinormal : TEXCOORD2;
	float3 WorldTangent : TEXCOORD3;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
	float4 Color1 : S_TARGET_OUTPUT1;
	float4 Color2 : S_TARGET_OUTPUT2;
	float4 Color3 : S_TARGET_OUTPUT3;
	float4 Color4 : S_TARGET_OUTPUT4;
};

@uniform SamplerState _DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_4d5a17c9f7c94ccc943b2d026887460a_DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_493829e1706d44c180eb4c04dba6fca6_DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_912e80d10fd74c23ae1efca6777abac2_DefaultWrapSampler;
@uniform float _OpacityFade;
void CalculateMatNormal(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_4d5a17c9f7c94ccc943b2d026887460a_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_4d5a17c9f7c94ccc943b2d026887460a_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatBaseColor(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_493829e1706d44c180eb4c04dba6fca6_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_493829e1706d44c180eb4c04dba6fca6_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatMetalMask(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_912e80d10fd74c23ae1efca6777abac2_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_912e80d10fd74c23ae1efca6777abac2_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(_OpacityFade);

	PixelOutput Out;

	float3 matNormal;
	CalculateMatNormal(srtData, In.TexCoords0, matNormal);
	//Normalize World Normal
	float3 worldNormalNormalized = normalize(In.WorldNormal);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(In.WorldBinormal);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(In.WorldTangent);

	row_major float3x3 NBT = row_major float3x3(worldTangentNormalized, worldNormalNormalized, worldBinormalNormalized);

	matNormal = mul(row_major float3x3(global_View), normalize(mul(matNormal, NBT)));

	float3 matBaseColor;
	CalculateMatBaseColor(srtData, In.TexCoords0, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(srtData, In.TexCoords0, matMetalMask);
	GBufferData gBufferData;
	gBufferData.Emissive = float3(0.0f, 0.0f, 0.0f);
	gBufferData.ViewSpaceNormal = matNormal;
	gBufferData.BaseColor = matBaseColor;
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = 0.5f;
	gBufferData.Reflectance = 0.5f;
	gBufferData.MetalMask = matMetalMask;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = float4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, Out.Color0, Out.Color1, Out.Color2, Out.Color3, Out.Color4);

	return Out;
}
