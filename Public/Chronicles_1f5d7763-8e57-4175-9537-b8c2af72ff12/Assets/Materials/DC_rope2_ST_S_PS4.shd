[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float ShadowDepth : TEXCOORD0;
};

@uniform SamplerState _DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler;
@uniform row_major float4x4 WorldMatrix;
@uniform float ShadowPointLight;
void CalculateMatWorldPositionOffset(SrtVsData srtData : S_SRT_DATA,
	float2 in_0,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler.SampleLOD(_DefaultWrapSampler, in_0, 0.0f);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1;
}

VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(global_ViewPos);
	@uniform(global_ViewInfo);
	@uniform(WorldMatrix);
	@uniform(ShadowPointLight);

	VertexOutput Out;

	float3 matWorldPositionOffset;
	CalculateMatWorldPositionOffset(srtData, SRT_VS_BUFFER_TEXCOORD0(id), matWorldPositionOffset);
	float4 tempPosStatic = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	//World space position
	float4 worldPosition = mul(WorldMatrix, tempPosStatic);

	worldPosition = (worldPosition + float4(matWorldPositionOffset, 0.0f));

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	float vertexDepth;
	if(ShadowPointLight > 0.0f)
	{
	vertexDepth = distance(worldPosition.xyz, global_ViewPos.xyz);
	}
	else
	{
	//View space position
	float4 viewPosition = mul(global_View, worldPosition);

	//Depth
	float depth = viewPosition.z;

	//Normalized Depth
	float depthNormalized = (depth / global_ViewInfo.x);

	vertexDepth = depthNormalized;
	}
	//Pass depth to pixel shader
	Out.ShadowDepth = vertexDepth;


	return Out;
}


[Fragment shader]


#pragma PSSL_target_output_format(target 0 FMT_32_ABGR)
#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float ShadowDepth : TEXCOORD0;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
};

PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	PixelOutput Out;

	float Local0 = ddx(In.ShadowDepth);
	float Local1 = ddy(In.ShadowDepth);
	Out.Color0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.Color0.x = In.ShadowDepth;
	Out.Color0.y = ((In.ShadowDepth * In.ShadowDepth) + (((Local0 * Local0) + (Local1 * Local1)) * 0.25f));

	return Out;
}
