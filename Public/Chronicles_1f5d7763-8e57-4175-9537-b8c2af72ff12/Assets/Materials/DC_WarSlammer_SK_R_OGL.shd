[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec4 inBlendIndices0;
in vec4 inBlendWeight0;
in vec3 inPosition0;

out vec4 Position0;

uniform mat4x3 BoneMatrices[128];
uniform mat4x4 WorldMatrix;

void main()
{
	mat4x3 boneMatrix1 = BoneMatrices[int(inBlendIndices0.x)];
	mat4x3 boneMatrix2 = BoneMatrices[int(inBlendIndices0.y)];
	mat4x3 boneMatrix3 = BoneMatrices[int(inBlendIndices0.z)];
	mat4x3 boneMatrix4 = BoneMatrices[int(inBlendIndices0.w)];
	//World space position
	vec4 worldPosition = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.x * (boneMatrix1 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.y * (boneMatrix2 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.z * (boneMatrix3 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.w * (boneMatrix4 * vec4(inPosition0, 1.0f))));
	worldPosition = (WorldMatrix * worldPosition);

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"

in vec4 Position0;

out vec4 outColor0;

void main()
{
	outColor0 = vec4(1.0f, 1.0f, 1.0f, 1.0f);
}
