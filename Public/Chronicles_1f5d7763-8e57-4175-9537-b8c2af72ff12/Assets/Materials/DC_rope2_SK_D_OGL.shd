[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec2 inTexCoord0;
in vec4 inBlendIndices0;
in vec4 inBlendWeight0;
in vec3 inPosition0;
in vec3 inNormal0;
in vec3 inBinormal0;
in vec3 inTangent0;

out vec4 Position0;
out vec2 TexCoord0;
out vec3 TexCoord1;
out vec3 TexCoord2;
out vec3 TexCoord3;

uniform sampler2D Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler;
uniform mat4x3 BoneMatrices[128];
uniform mat4x4 WorldMatrix;

void CalculateMatWorldPositionOffset(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = textureLod(Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler, in_0, 0.0f);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void main()
{
	vec3 matWorldPositionOffset;
	CalculateMatWorldPositionOffset(inTexCoord0, matWorldPositionOffset);
	mat4x3 boneMatrix1 = BoneMatrices[int(inBlendIndices0.x)];
	mat4x3 boneMatrix2 = BoneMatrices[int(inBlendIndices0.y)];
	mat4x3 boneMatrix3 = BoneMatrices[int(inBlendIndices0.z)];
	mat4x3 boneMatrix4 = BoneMatrices[int(inBlendIndices0.w)];
	//World space position
	vec4 worldPosition = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.x * (boneMatrix1 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.y * (boneMatrix2 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.z * (boneMatrix3 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.w * (boneMatrix4 * vec4(inPosition0, 1.0f))));
	worldPosition = (WorldMatrix * worldPosition);

	worldPosition = (worldPosition + vec4(matWorldPositionOffset, 0.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	TexCoord0 = inTexCoord0;
	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(inNormal0);

	//World space Normal
	vec3 worldNormal = vec3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (inBlendWeight0.x * (boneMatrix1 * vec4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (inBlendWeight0.y * (boneMatrix2 * vec4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (inBlendWeight0.z * (boneMatrix3 * vec4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (inBlendWeight0.w * (boneMatrix4 * vec4(localNormalNormalized, 0.0f))));
	worldNormal = (WorldMatrix * vec4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord1 = worldNormalNormalized;

	//Normalize Local Binormal
	vec3 localBinormalNormalized = normalize(inBinormal0);

	//World space Binormal
	vec3 worldBinormal = vec3(0.0f, 0.0f, 0.0f);
	worldBinormal = (worldBinormal + (inBlendWeight0.x * (boneMatrix1 * vec4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (inBlendWeight0.y * (boneMatrix2 * vec4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (inBlendWeight0.z * (boneMatrix3 * vec4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (inBlendWeight0.w * (boneMatrix4 * vec4(localBinormalNormalized, 0.0f))));
	worldBinormal = (WorldMatrix * vec4(worldBinormal, 0.0f)).xyz;

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(worldBinormal);

	TexCoord2 = worldBinormalNormalized;

	//Normalize Local Tangent
	vec3 localTangentNormalized = normalize(inTangent0);

	//World space Tangent
	vec3 worldTangent = vec3(0.0f, 0.0f, 0.0f);
	worldTangent = (worldTangent + (inBlendWeight0.x * (boneMatrix1 * vec4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (inBlendWeight0.y * (boneMatrix2 * vec4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (inBlendWeight0.z * (boneMatrix3 * vec4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (inBlendWeight0.w * (boneMatrix4 * vec4(localTangentNormalized, 0.0f))));
	worldTangent = (WorldMatrix * vec4(worldTangent, 0.0f)).xyz;

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(worldTangent);

	TexCoord3 = worldTangentNormalized;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_PS_OGL.shdh"
#include "/Shaders/GLSL3/Deferred.shdh"

in vec4 Position0;
in vec2 TexCoord0;
in vec3 TexCoord1;
in vec3 TexCoord2;
in vec3 TexCoord3;

out vec4 outColor0;
out vec4 outColor1;
out vec4 outColor2;
out vec4 outColor3;
out vec4 outColor4;

uniform sampler2D Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler;
uniform float _OpacityFade;

void CalculateMatNormal(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatBaseColor(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatReflectance(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

void main()
{
	vec3 matNormal;
	CalculateMatNormal(TexCoord0, matNormal);
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord1);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(TexCoord2);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(TexCoord3);

	mat3x3 NBT = mat3x3(vec3(worldTangentNormalized.x, worldNormalNormalized.x, worldBinormalNormalized.x), vec3(worldTangentNormalized.y, worldNormalNormalized.y, worldBinormalNormalized.y), vec3(worldTangentNormalized.z, worldNormalNormalized.z, worldBinormalNormalized.z));

	matNormal = (mat3x3(global_View[0].xyz, global_View[1].xyz, global_View[2].xyz) * normalize((matNormal * NBT)));

	vec3 matBaseColor;
	CalculateMatBaseColor(TexCoord0, matBaseColor);
	float matReflectance;
	CalculateMatReflectance(TexCoord0, matReflectance);
	GBufferData gBufferData;
	gBufferData.Emissive = vec3(0.0f, 0.0f, 0.0f);
	gBufferData.ViewSpaceNormal = matNormal;
	gBufferData.BaseColor = matBaseColor;
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = 0.5f;
	gBufferData.Reflectance = matReflectance;
	gBufferData.MetalMask = 0.0f;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, outColor0, outColor1, outColor2, outColor3, outColor4);
}
