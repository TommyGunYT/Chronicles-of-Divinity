[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float3 ViewNormal : TEXCOORD0;
};

@uniform row_major float4x4 WorldMatrix;
VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(WorldMatrix);

	VertexOutput Out;

	float4 tempPosStatic = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	//World space position
	float4 worldPosition = mul(WorldMatrix, tempPosStatic);

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	//Normalize Local Normal
	float3 localNormalNormalized = normalize(SRT_VS_BUFFER_NORMAL(id));

	//World space Normal
	float3 worldNormal = mul(row_major float3x3(WorldMatrix), localNormalNormalized);

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	float3 viewSpaceNormal = mul(row_major float3x3(global_View), worldNormalNormalized);

	Out.ViewNormal = viewSpaceNormal;


	return Out;
}


[Fragment shader]


#pragma PSSL_target_output_format(default FMT_FP16_ABGR)
#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"
#include "Shaders/PS4/PBR.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float3 ViewNormal : TEXCOORD0;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
	float4 Color1 : S_TARGET_OUTPUT1;
	float4 Color2 : S_TARGET_OUTPUT2;
	float4 Color3 : S_TARGET_OUTPUT3;
	float4 Color4 : S_TARGET_OUTPUT4;
};

@uniform float _OpacityFade;
PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(_OpacityFade);

	PixelOutput Out;

	float3 viewNormalNormalized = normalize(In.ViewNormal);

	GBufferData gBufferData;
	gBufferData.Emissive = float3(0.0f, 0.0f, 0.0f);
	gBufferData.ViewSpaceNormal = viewNormalNormalized;
	gBufferData.BaseColor = float3(0.0f, 0.0f, 0.0f);
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = 0.5f;
	gBufferData.Reflectance = 0.5f;
	gBufferData.MetalMask = 0.0f;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = float4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, Out.Color0, Out.Color1, Out.Color2, Out.Color3, Out.Color4);

	return Out;
}
