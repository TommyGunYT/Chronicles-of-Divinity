[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec3 inPosition0;
in vec3 inNormal0;

out vec4 Position0;
out vec3 TexCoord0;

uniform mat4x4 WorldMatrix;

void main()
{
	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(inNormal0);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	vec3 viewSpaceNormal = (mat3x3(global_View[0].xyz, global_View[1].xyz, global_View[2].xyz) * worldNormalNormalized);

	TexCoord0 = viewSpaceNormal;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GLSL3/Deferred.shdh"

in vec4 Position0;
in vec3 TexCoord0;

out vec4 outColor0;
out vec4 outColor1;
out vec4 outColor2;
out vec4 outColor3;
out vec4 outColor4;

uniform float _OpacityFade;

void main()
{
	vec3 viewNormalNormalized = normalize(TexCoord0);

	GBufferData gBufferData;
	gBufferData.Emissive = vec3(0.0f, 0.0f, 0.0f);
	gBufferData.ViewSpaceNormal = viewNormalNormalized;
	gBufferData.BaseColor = vec3(0.0f, 0.0f, 0.0f);
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = 0.5f;
	gBufferData.Reflectance = 0.5f;
	gBufferData.MetalMask = 0.0f;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, outColor0, outColor1, outColor2, outColor3, outColor4);
}
