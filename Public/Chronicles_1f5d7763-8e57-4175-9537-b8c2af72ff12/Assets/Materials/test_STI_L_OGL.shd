[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec3 inPosition0;
in vec4 inColor1;
in vec4 inColor2;
in vec4 inColor3;
in vec3 inNormal0;

out vec4 Position0;
out vec3 TexCoord0;
out vec3 TexCoord1;
out float TexCoord2;
out float TexCoord3;

void main()
{
	//Create Instance World Matrix
	vec4 col1 = vec4(inColor1.x, inColor1.y, inColor1.z, 0.0f);
	vec4 col2 = vec4(inColor1.w, inColor2.x, inColor2.y, 0.0f);
	vec4 col3 = vec4(inColor2.z, inColor2.w, inColor3.x, 0.0f);
	vec4 col4 = vec4(inColor3.y, inColor3.z, inColor3.w, 1.0f);
	mat4x4 WorldMatrix = mat4x4(col1, col2, col3, col4);

	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(inNormal0);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord0 = worldNormalNormalized;

	//World space view vector
	vec3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	TexCoord1 = worldView;

	//Calculate Height Fog
	float depthValue = clamp(((global_FogPropertyMatrix[3].y - length(worldView)) / (global_FogPropertyMatrix[3].y - global_FogPropertyMatrix[3].x)), 0, 1);
	float heightDensity = ((worldPosition.y - global_FogPropertyMatrix[2].z) / global_FogPropertyMatrix[3].z);
	float heightFog = clamp(max(depthValue, heightDensity), 0, 1);

	TexCoord2 = heightFog;

	//Calculate Distance Fog
	float distanceFog = clamp(((global_FogPropertyMatrix[2].y - length(worldView)) / (global_FogPropertyMatrix[2].y - global_FogPropertyMatrix[2].x)), 0, 1);

	TexCoord3 = distanceFog;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GLSL3/Deferred.shdh"
#include "/"
#include "/Shaders/GlobalConstants_PS_OGL.shdh"

in vec4 Position0;
in vec3 TexCoord0;
in vec3 TexCoord1;
in float TexCoord2;
in float TexCoord3;

out vec4 outColor0;

uniform float _OpacityFade;

void main()
{
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord0);

	float matReflectance = 0.5f;
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness = 0.5f;
	matRoughness = max(0.09f, matRoughness);
	vec3 FinalColor = vec3(0.0f, 0.0f, 0.0f);

	//Calculate Image Based Lighting
	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(TexCoord1);

	vec3 iblDiffuse;
	vec3 iblSpecular;
	EvaluateDistantIBL(vec3(0.0f, 0.0f, 0.0f), matRoughness, vec3(matReflectance, matReflectance, matReflectance), 0.0f, worldNormalNormalized, worldViewNormalized, iblDiffuse, iblSpecular);
	FinalColor = ((FinalColor + iblDiffuse) + iblSpecular);

	vec3 LightDiffuseColorOut;
	vec3 LightSpecularColorOut;
	DirectionLight(worldNormalNormalized, worldViewNormalized, global_LightPropertyMatrix, vec3(0.0f, 0.0f, 0.0f), matReflectance, matRoughness, 0.0f, LightDiffuseColorOut, LightSpecularColorOut);
	FinalColor = ((FinalColor + LightDiffuseColorOut) + LightSpecularColorOut);

	FinalColor = PreExpose(FinalColor);

	FinalColor = mix(global_FogPropertyMatrix[1], FinalColor, vec3(TexCoord2, TexCoord2, TexCoord2));
	FinalColor = mix(global_FogPropertyMatrix[0], FinalColor, vec3(TexCoord3, TexCoord3, TexCoord3));

	outColor0 = vec4(FinalColor, _OpacityFade);
	outColor0 = max(outColor0, 0.0f);
}
