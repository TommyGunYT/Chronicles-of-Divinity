[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec2 inTexCoord0;
in vec3 inPosition0;
in vec4 inColor1;
in vec4 inColor2;
in vec4 inColor3;

out vec4 Position0;

uniform sampler2D Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler;

void CalculateMatWorldPositionOffset(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = textureLod(Texture2DParameter_1acfc61d8c0b43f192187ceba9525c77_DefaultWrapSampler, in_0, 0.0f);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void main()
{
	vec3 matWorldPositionOffset;
	CalculateMatWorldPositionOffset(inTexCoord0, matWorldPositionOffset);
	//Create Instance World Matrix
	vec4 col1 = vec4(inColor1.x, inColor1.y, inColor1.z, 0.0f);
	vec4 col2 = vec4(inColor1.w, inColor2.x, inColor2.y, 0.0f);
	vec4 col3 = vec4(inColor2.z, inColor2.w, inColor3.x, 0.0f);
	vec4 col4 = vec4(inColor3.y, inColor3.z, inColor3.w, 1.0f);
	mat4x4 WorldMatrix = mat4x4(col1, col2, col3, col4);

	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	worldPosition = (worldPosition + vec4(matWorldPositionOffset, 0.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"

in vec4 Position0;

out vec4 outColor0;

void main()
{
	outColor0 = vec4(1.0f, 1.0f, 1.0f, 1.0f);
}
